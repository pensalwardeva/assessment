{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserprofileComponent } from '../userprofile/userprofile.component';\nimport { Validators, FormControl } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(modalService, formBuilder, api) {\n    this.modalService = modalService;\n    this.formBuilder = formBuilder;\n    this.api = api;\n    this.ProfileDP = \"\";\n    this.Age = 0;\n    this.interest = \"\";\n    this.firstName = \"\";\n    this.LastName = \"\";\n    this.Email = \"\";\n    this.telno = \"\";\n    this.State = \"\";\n    this.Country = \"\";\n    this.tags = \"\";\n    this.address = \"\";\n    this.value = 0;\n  }\n  onSubmit() {}\n  ngOnInit() {\n    this.registrationForm = this.formBuilder.group({\n      FirstName: new FormControl('', Validators.required),\n      LastName: new FormControl('', Validators.required),\n      Email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      State: new FormControl('', Validators.required),\n      Country: new FormControl('', Validators.required),\n      Address: new FormControl('', Validators.required),\n      Age: new FormControl('', Validators.required),\n      ProfileDP: new FormControl('', Validators.required)\n    });\n  }\n  cancel() {\n    // reset the data to the originalData\n    this.data = {\n      ...this.originalData\n    };\n  }\n  onFileSelected(photo) {\n    this.ProfileDP = photo;\n  }\n  openUserprofileModal(data) {\n    const modalRef = this.modalService.open(UserprofileComponent);\n    modalRef.componentInstance.name = 'Submit';\n    this.api.RegisterUser(data).subscribe(() => {});\n  }\n  close() {\n    this.modalService.dismissAll(UserprofileComponent);\n  }\n  valueChanged(e) {\n    this.Age = e.target.value;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAAiCC,UAAU,EAAEC,WAAW,QAAQ,gBAAgB;AAUzE,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAI5BC,YAAoBC,YAAsB,EAAUC,WAAwB,EAAUC,GAAe;IAAjF,iBAAY,GAAZF,YAAY;IAAoB,gBAAW,GAAXC,WAAW;IAAuB,QAAG,GAAHC,GAAG;IAiCzF,cAAS,GAAG,EAAE;IACd,QAAG,GAAW,CAAC;IACf,aAAQ,GAAW,EAAE;IACrB,cAAS,GAAW,EAAE;IACtB,aAAQ,GAAW,EAAE;IACrB,UAAK,GAAW,EAAE;IAClB,UAAK,GAAQ,EAAE;IACf,UAAK,GAAW,EAAE;IAClB,YAAO,GAAW,EAAE;IACpB,SAAI,GAAW,EAAE;IACjB,YAAO,GAAW,EAAE;IACpB,UAAK,GAAW,CAAC;EA1CjB;EAKAC,QAAQ,IAER;EAKAC,QAAQ;IAEN,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC7CC,SAAS,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ,CAAC;MACnDC,QAAQ,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ,CAAC;MAClDE,KAAK,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACe,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;MAClHC,KAAK,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ,CAAC;MAC/CK,OAAO,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ,CAAC;MACjDM,OAAO,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ,CAAC;MACjDO,GAAG,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAED,UAAU,CAACY,QAAQ,CAAC;MAC7CQ,SAAS,EAAE,IAAInB,WAAW,CAAE,EAAE,EAACD,UAAU,CAACY,QAAQ;KACnD,CAAC;EACJ;EAEAS,MAAM;IACJ;IACA,IAAI,CAACC,IAAI,GAAG;MAAE,GAAG,IAAI,CAACC;IAAY,CAAE;EACtC;EAeAC,cAAc,CAACC,KAAS;IACtB,IAAI,CAACL,SAAS,GAAGK,KAAK;EACxB;EAEAC,oBAAoB,CAACJ,IAAe;IAClC,MAAMK,QAAQ,GAAG,IAAI,CAACvB,YAAY,CAACwB,IAAI,CAAC7B,oBAAoB,CAAC;IAC7D4B,QAAQ,CAACE,iBAAiB,CAACC,IAAI,GAAG,QAAQ;IAC1C,IAAI,CAACxB,GAAG,CAACyB,YAAY,CAACT,IAAI,CAAC,CAACU,SAAS,CAAC,MAAK,CAE3C,CAAC,CAAC;EACJ;EAEAC,KAAK;IACJ,IAAI,CAAC7B,YAAY,CAAC8B,UAAU,CAACnC,oBAAoB,CAAC;EACnD;EAEAoC,YAAY,CAACC,CAAM;IACjB,IAAI,CAACjB,GAAG,GAAGiB,CAAC,CAACC,MAAM,CAACC,KAAK;EAC3B;CAED;AAtEYpC,iBAAiB,eAL7BJ,SAAS,CAAC;EACTyC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWvC,iBAAiB,CAsE7B;SAtEYA,iBAAiB","names":["Component","UserprofileComponent","Validators","FormControl","RegisterComponent","constructor","modalService","formBuilder","api","onSubmit","ngOnInit","registrationForm","group","FirstName","required","LastName","Email","pattern","State","Country","Address","Age","ProfileDP","cancel","data","originalData","onFileSelected","photo","openUserprofileModal","modalRef","open","componentInstance","name","RegisterUser","subscribe","close","dismissAll","valueChanged","e","target","value","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\nucleus computer\\Desktop\\assessment\\first-product\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { UserprofileComponent } from '../userprofile/userprofile.component';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ApiService } from '../api.service';\nimport { datamodel } from './model';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  data: any;\n\n  registrationForm: FormGroup | any;\n  constructor(private modalService: NgbModal, private formBuilder: FormBuilder, private api: ApiService) {\n\n  }\n\n\n\n\n  onSubmit() {\n\n  }\n\n  originalData: any; // the original data before any changes were madess\n  register: any;\n\n  ngOnInit(): void {\n\n    this.registrationForm = this.formBuilder.group({\n      FirstName: new FormControl('', Validators.required),\n      LastName: new FormControl('', Validators.required),\n      Email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      State: new FormControl('', Validators.required),\n      Country: new FormControl('', Validators.required),\n      Address: new FormControl('', Validators.required),\n      Age: new FormControl('', Validators.required),\n      ProfileDP: new FormControl ('',Validators.required),\n    });\n  }\n\n  cancel() {\n    // reset the data to the originalData\n    this.data = { ...this.originalData };\n  }\n\n  ProfileDP = \"\";\n  Age: number = 0;\n  interest: string = \"\";\n  firstName: string = \"\";\n  LastName: string = \"\";\n  Email: string = \"\";\n  telno: any = \"\";\n  State: string = \"\";\n  Country: string = \"\";\n  tags: string = \"\";\n  address: string = \"\";\n  value: number = 0;\n\n  onFileSelected(photo:any) {\n    this.ProfileDP = photo;\n  }\n\n  openUserprofileModal(data: datamodel) {\n    const modalRef = this.modalService.open(UserprofileComponent);\n    modalRef.componentInstance.name = 'Submit';\n    this.api.RegisterUser(data).subscribe(() => {\n\n    })\n  }\n\n  close(){\n   this.modalService.dismissAll(UserprofileComponent);\n  }\n\n  valueChanged(e :any) {\n    this.Age = e.target.value;\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}