{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserprofileComponent } from '../userprofile/userprofile.component';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(modalService, formBuilder) {\n    this.modalService = modalService;\n    this.registrationForm = new FormGroup({\n      FirstName: new FormControl('', Validators.required),\n      LastName: new FormControl('', Validators.required),\n      Email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      Search: new FormControl('', Validators.required),\n      Country: new FormControl('', Validators.required),\n      Address: new FormControl('', Validators.required),\n      Age: new FormControl('', Validators.required)\n    });\n    this.ProfileDP = \"\";\n    this.age = 0;\n    this.interest = \"\";\n    this.firstName = \"\";\n    this.LastName = \"\";\n    this.Email = \"\";\n    this.telno = \"\";\n    this.State = \"\";\n    this.Country = \"\";\n    this.tags = \"\";\n    this.address = \"\";\n    this.value = 0;\n  }\n  onSubmit() {}\n  ngOnInit() {\n    // initialize originalData with the current data\n    this.originalData = {/* some data */};\n  }\n  cancel() {\n    // reset the data to the originalData\n    this.data = {\n      ...this.originalData\n    };\n  }\n  onFileSelected(event) {}\n  openUserprofileModal() {\n    const modalRef = this.modalService.open(UserprofileComponent);\n    modalRef.componentInstance.name = 'Submit';\n  }\n  updateTextInput(e) {\n    this.value = e.target.value;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,SAAS,EAAeC,UAAU,EAAEC,WAAW,QAAQ,gBAAgB;AAOzE,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5BC,YAAoBC,YAAsB,EAAEC,WAAwB;IAAhD,iBAAY,GAAZD,YAAY;IAIhC,qBAAgB,GAAG,IAAIL,SAAS,CAAC;MAC/BO,SAAS,EAAE,IAAIL,WAAW,CAAC,EAAE,EAAED,UAAU,CAACO,QAAQ,CAAC;MACnDC,QAAQ,EAAE,IAAIP,WAAW,CAAE,EAAE,EAAED,UAAU,CAACO,QAAQ,CAAC;MACnDE,KAAK,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAC,CAACD,UAAU,CAACO,QAAQ,EAACP,UAAU,CAACU,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;MAChHC,MAAM,EAAE,IAAIV,WAAW,CAAE,EAAE,EAAED,UAAU,CAACO,QAAQ,CAAC;MACjDK,OAAO,EAAE,IAAIX,WAAW,CAAE,EAAE,EAAED,UAAU,CAACO,QAAQ,CAAC;MAClDM,OAAO,EAAE,IAAIZ,WAAW,CAAE,EAAE,EAAED,UAAU,CAACO,QAAQ,CAAC;MAClDO,GAAG,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAED,UAAU,CAACO,QAAQ;KAC7C,CAAC;IAqBF,cAAS,GAAG,EAAE;IACd,QAAG,GAAW,CAAC;IACf,aAAQ,GAAW,EAAE;IACrB,cAAS,GAAW,EAAE;IACtB,aAAQ,GAAW,EAAE;IACrB,UAAK,GAAW,EAAE;IAClB,UAAK,GAAQ,EAAE;IACf,UAAK,GAAW,EAAE;IAClB,YAAO,GAAW,EAAE;IACpB,SAAI,GAAW,EAAE;IACjB,YAAO,GAAW,EAAE;IACpB,UAAK,GAAW,CAAC;EA1CjB;EAYAQ,QAAQ,IAER;EAOAC,QAAQ;IACN;IACA,IAAI,CAACC,YAAY,GAAG,CAAE,gBAAiB;EACzC;EAEAC,MAAM;IACJ;IACA,IAAI,CAACC,IAAI,GAAG;MAAE,GAAG,IAAI,CAACF;IAAY,CAAE;EACtC;EAeAG,cAAc,CAACC,KAAU,GAEzB;EAEAC,oBAAoB;IAClB,MAAMC,QAAQ,GAAG,IAAI,CAACnB,YAAY,CAACoB,IAAI,CAAC1B,oBAAoB,CAAC;IAC7DyB,QAAQ,CAACE,iBAAiB,CAACC,IAAI,GAAG,QAAQ;EAC5C;EAEAC,eAAe,CAACC,CAAM;IACpB,IAAI,CAACC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;EAC7B;CAED;AA7DY3B,iBAAiB,eAL7BL,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW/B,iBAAiB,CA6D7B;SA7DYA,iBAAiB","names":["Component","UserprofileComponent","FormGroup","Validators","FormControl","RegisterComponent","constructor","modalService","formBuilder","FirstName","required","LastName","Email","pattern","Search","Country","Address","Age","onSubmit","ngOnInit","originalData","cancel","data","onFileSelected","event","openUserprofileModal","modalRef","open","componentInstance","name","updateTextInput","e","value","target","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\nucleus computer\\Desktop\\assessment\\first-product\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { UserprofileComponent } from '../userprofile/userprofile.component';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  constructor(private modalService: NgbModal, formBuilder: FormBuilder) {\n  \n  }\n\n  registrationForm = new FormGroup({\n    FirstName: new FormControl('', Validators.required),\n    LastName: new FormControl ('', Validators.required),\n    Email: new FormControl('',[Validators.required,Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n    Search: new FormControl ('', Validators.required),    \n    Country: new FormControl ('', Validators.required),\n    Address: new FormControl ('', Validators.required),\n    Age: new FormControl('', Validators.required)\n  });\n\n  onSubmit() {\n\n  }\n\n  originalData: any; // the original data before any changes were made\n  data: any;\n  register: any;\n  formBuilder: any;\n\n  ngOnInit() {\n    // initialize originalData with the current data\n    this.originalData = { /* some data */ };\n  }\n\n  cancel() {\n    // reset the data to the originalData\n    this.data = { ...this.originalData };\n  }\n\n  ProfileDP = \"\";\n  age: number = 0;\n  interest: string = \"\";\n  firstName: string = \"\";\n  LastName: string = \"\";\n  Email: string = \"\";\n  telno: any = \"\";\n  State: string = \"\";\n  Country: string = \"\";\n  tags: string = \"\";\n  address: string = \"\";\n  value: number = 0;\n\n  onFileSelected(event: any) {\n\n  }\n\n  openUserprofileModal() {\n    const modalRef = this.modalService.open(UserprofileComponent);\n    modalRef.componentInstance.name = 'Submit'\n  }\n\n  updateTextInput(e: any) {\n    this.value = e.target.value;\n  }\n \n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}